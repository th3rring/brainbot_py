# -*- coding: utf-8 -*-
"""
=============================
Manifold Approximation 3D Visualizations
=============================

Loads a pickled file of a 3D surface and plots it using hypertools. Modify to
change the source data and the manifold approximation method. Be aware that this
can take a long time to run, depending on the size of the data and the method!
"""

# Code source: Thomas Herring
# License: MIT

# Imports
import hypertools as hyp
import pickle as pkl

# Looks at local directory for this btw
pickle_fn = 'region_0.25_0.5_surface.pkl'

# Load the data
with open(pickle_fn, 'rb') as f:
    data = pkl.load(f)


"""
Tested with:
1. UMAP - Uniform Manifold Approximation and Projection for Dimension Reduction
    UMAP is another non-linear technique that works well for manifold learning. It aims to preserve both local and global structure in the data by constructing a fuzzy topological representation of the high-dimensional data, which is then optimized to find a low-dimensional embedding.
2. TSNE - t-distributed Stochastic Neighbor Embedding
    t-SNE is a non-linear method that is particularly effective at preserving local structure in high-dimensional data. It optimizes a probability distribution over the data points in both high and low-dimensional space to create a lower-dimensional representation.
3. LocallyLinearEmbedding - Locally Linear Embedding
     LLE is a non-linear technique that attempts to preserve local properties of the data. It works by reconstructing each data point as a linear combination of its neighbors and then finding a low-dimensional representation that maintains these relationships.
4. SpectralEmbedding - Spectral Embedding
    This method computes the eigenvectors of the Laplacian matrix of the data's similarity graph and uses them to construct a low-dimensional representation. It is particularly effective when the data lies on a manifold with complex topological structure.
    
Descriptions were generated by ChatGPT, their accuracy is not guaranteed.

Didn't work with:
1. Isomap - Isometric Mapping
    Reason being, Isomap creates an adjacency matrix, which is too large for my computer to handle.
    For the huge 500,000 surface sample dataset, this would take 1.82 TiB of memory. 


"""

# Plot the data
hyp.plot(data, '.', ndims=3, animate=True, size=[
         16, 10], save_path='cspace-surface-isomap.mp4', reduce='LocallyLinearEmbedding')
